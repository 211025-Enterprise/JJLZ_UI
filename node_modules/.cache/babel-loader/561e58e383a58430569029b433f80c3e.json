{"ast":null,"code":"/*\r\n * World Calendars\r\n * https://github.com/alexcjohnson/world-calendars\r\n *\r\n * Batch-converted from kbwood/calendars\r\n * Many thanks to Keith Wood and all of the contributors to the original project!\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\n\n/* http://keith-wood.name/calendars.html\r\n  Discworld calendar for jQuery v2.0.2.\r\n  Written by Keith Wood (wood.keith{at}optusnet.com.au) January 2016.\r\n  Available under the MIT (http://keith-wood.name/licence.html) license. \r\n  Please attribute the author if you use it. */\nvar main = require('../main');\n\nvar assign = require('object-assign');\n/** Implementation of the Discworld calendar - Unseen University version.\r\n    See also <a href=\"http://wiki.lspace.org/mediawiki/Discworld_calendar\">http://wiki.lspace.org/mediawiki/Discworld_calendar</a>\r\n    and <a href=\"http://discworld.wikia.com/wiki/Discworld_calendar\">http://discworld.wikia.com/wiki/Discworld_calendar</a>.\r\n    @class DiscworldCalendar\r\n    @param [language=''] {string} The language code (default English) for localisation. */\n\n\nfunction DiscworldCalendar(language) {\n  this.local = this.regionalOptions[language || ''] || this.regionalOptions[''];\n}\n\nDiscworldCalendar.prototype = new main.baseCalendar();\nassign(DiscworldCalendar.prototype, {\n  /** The calendar name.\r\n      @memberof DiscworldCalendar */\n  name: 'Discworld',\n\n  /** Julian date of start of Discworld epoch: 1 January 0001 CE.\r\n      @memberof DiscworldCalendar */\n  jdEpoch: 1721425.5,\n\n  /** Days per month in a common year.\r\n      @memberof DiscworldCalendar */\n  daysPerMonth: [16, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32],\n\n  /** <code>true</code> if has a year zero, <code>false</code> if not.\r\n      @memberof DiscworldCalendar */\n  hasYearZero: false,\n\n  /** The minimum month number.\r\n      @memberof DiscworldCalendar */\n  minMonth: 1,\n\n  /** The first month in the year.\r\n      @memberof DiscworldCalendar */\n  firstMonth: 1,\n\n  /** The minimum day number.\r\n      @memberof DiscworldCalendar */\n  minDay: 1,\n\n  /** Localisations for the plugin.\r\n      Entries are objects indexed by the language code ('' being the default US/English).\r\n      Each object has the following attributes.\r\n      @memberof DiscworldCalendar\r\n      @property name {string} The calendar name.\r\n      @property epochs {string[]} The epoch names.\r\n      @property monthNames {string[]} The long names of the months of the year.\r\n      @property monthNamesShort {string[]} The short names of the months of the year.\r\n      @property dayNames {string[]} The long names of the days of the week.\r\n      @property dayNamesShort {string[]} The short names of the days of the week.\r\n      @property dayNamesMin {string[]} The minimal names of the days of the week.\r\n      @property dateFormat {string} The date format for this calendar.\r\n              See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\r\n      @property firstDay {number} The number of the first day of the week, starting at 0.\r\n      @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n  regionalOptions: {\n    // Localisations\n    '': {\n      name: 'Discworld',\n      epochs: ['BUC', 'UC'],\n      monthNames: ['Ick', 'Offle', 'February', 'March', 'April', 'May', 'June', 'Grune', 'August', 'Spune', 'Sektober', 'Ember', 'December'],\n      monthNamesShort: ['Ick', 'Off', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Gru', 'Aug', 'Spu', 'Sek', 'Emb', 'Dec'],\n      dayNames: ['Sunday', 'Octeday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n      dayNamesShort: ['Sun', 'Oct', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n      dayNamesMin: ['Su', 'Oc', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n      digits: null,\n      dateFormat: 'yyyy/mm/dd',\n      firstDay: 2,\n      isRTL: false\n    }\n  },\n\n  /** Determine whether this date is in a leap year.\r\n      @memberof DiscworldCalendar\r\n      @param year {CDate|number} The date to examine or the year to examine.\r\n      @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\r\n      @throws Error if an invalid year or a different calendar used. */\n  leapYear: function leapYear(year) {\n    this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n\n    return false;\n  },\n\n  /** Retrieve the number of months in a year.\r\n      @memberof DiscworldCalendar\r\n      @param year {CDate|number} The date to examine or the year to examine.\r\n      @return {number} The number of months.\r\n      @throws Error if an invalid year or a different calendar used. */\n  monthsInYear: function monthsInYear(year) {\n    this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n\n    return 13;\n  },\n\n  /** Retrieve the number of days in a year.\r\n      @memberof DiscworldCalendar\r\n      @param year {CDate|number} The date to examine or the year to examine.\r\n      @return {number} The number of days.\r\n      @throws Error if an invalid year or a different calendar used. */\n  daysInYear: function daysInYear(year) {\n    this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n\n    return 400;\n  },\n\n  /** Determine the week of the year for a date.\r\n      @memberof DiscworldCalendar\r\n      @param year {CDate|number} The date to examine or the year to examine.\r\n      @param [month] {number} The month to examine.\r\n      @param [day] {number} The day to examine.\r\n      @return {number} The week of the year.\r\n      @throws Error if an invalid date or a different calendar used. */\n  weekOfYear: function weekOfYear(year, month, day) {\n    // Find Sunday of this week starting on Sunday\n    var checkDate = this.newDate(year, month, day);\n    checkDate.add(-checkDate.dayOfWeek(), 'd');\n    return Math.floor((checkDate.dayOfYear() - 1) / 8) + 1;\n  },\n\n  /** Retrieve the number of days in a month.\r\n      @memberof DiscworldCalendar\r\n      @param year {CDate|number} The date to examine or the year of the month.\r\n      @param [month] {number} The month.\r\n      @return {number} The number of days in this month.\r\n      @throws Error if an invalid month/year or a different calendar used. */\n  daysInMonth: function daysInMonth(year, month) {\n    var date = this._validate(year, month, this.minDay, main.local.invalidMonth);\n\n    return this.daysPerMonth[date.month() - 1];\n  },\n\n  /** Retrieve the number of days in a week.\r\n      @memberof DiscworldCalendar\r\n      @return {number} The number of days. */\n  daysInWeek: function daysInWeek() {\n    return 8;\n  },\n\n  /** Retrieve the day of the week for a date.\r\n      @memberof DiscworldCalendar\r\n      @param year {CDate|number} The date to examine or the year to examine.\r\n      @param [month] {number} The month to examine.\r\n      @param [day] {number} The day to examine.\r\n      @return {number} The day of the week: 0 to number of days - 1.\r\n      @throws Error if an invalid date or a different calendar used. */\n  dayOfWeek: function dayOfWeek(year, month, day) {\n    var date = this._validate(year, month, day, main.local.invalidDate);\n\n    return (date.day() + 1) % 8;\n  },\n\n  /** Determine whether this date is a week day.\r\n      @memberof DiscworldCalendar\r\n      @param year {CDate|number} The date to examine or the year to examine.\r\n      @param [month] {number} The month to examine.\r\n      @param [day] {number} The day to examine.\r\n      @return {boolean} <code>true</code> if a week day, <code>false</code> if not.\r\n      @throws Error if an invalid date or a different calendar used. */\n  weekDay: function weekDay(year, month, day) {\n    var dow = this.dayOfWeek(year, month, day);\n    return dow >= 2 && dow <= 6;\n  },\n\n  /** Retrieve additional information about a date.\r\n      @memberof DiscworldCalendar\r\n      @param year {CDate|number} The date to examine or the year to examine.\r\n      @param [month] {number} The month to examine.\r\n      @param [day] {number} The day to examine.\r\n      @return {object} Additional information - contents depends on calendar.\r\n      @throws Error if an invalid date or a different calendar used. */\n  extraInfo: function extraInfo(year, month, day) {\n    var date = this._validate(year, month, day, main.local.invalidDate);\n\n    return {\n      century: centuries[Math.floor((date.year() - 1) / 100) + 1] || ''\n    };\n  },\n\n  /** Retrieve the Julian date equivalent for this date,\r\n      i.e. days since January 1, 4713 BCE Greenwich noon.\r\n      @memberof DiscworldCalendar\r\n      @param year {CDate|number} The date to convert or the year to convert.\r\n      @param [month] {number} The month to convert.\r\n      @param [day] {number} The day to convert.\r\n      @return {number} The equivalent Julian date.\r\n      @throws Error if an invalid date or a different calendar used. */\n  toJD: function toJD(year, month, day) {\n    var date = this._validate(year, month, day, main.local.invalidDate);\n\n    year = date.year() + (date.year() < 0 ? 1 : 0);\n    month = date.month();\n    day = date.day();\n    return day + (month > 1 ? 16 : 0) + (month > 2 ? (month - 2) * 32 : 0) + (year - 1) * 400 + this.jdEpoch - 1;\n  },\n\n  /** Create a new date from a Julian date.\r\n      @memberof DiscworldCalendar\r\n      @param jd {number} The Julian date to convert.\r\n      @return {CDate} The equivalent date. */\n  fromJD: function fromJD(jd) {\n    jd = Math.floor(jd + 0.5) - Math.floor(this.jdEpoch) - 1;\n    var year = Math.floor(jd / 400) + 1;\n    jd -= (year - 1) * 400;\n    jd += jd > 15 ? 16 : 0;\n    var month = Math.floor(jd / 32) + 1;\n    var day = jd - (month - 1) * 32 + 1;\n    return this.newDate(year <= 0 ? year - 1 : year, month, day);\n  }\n}); // Names of the centuries\n\nvar centuries = {\n  20: 'Fruitbat',\n  21: 'Anchovy'\n}; // Discworld calendar implementation\n\nmain.calendars.discworld = DiscworldCalendar;","map":null,"metadata":{},"sourceType":"script"}