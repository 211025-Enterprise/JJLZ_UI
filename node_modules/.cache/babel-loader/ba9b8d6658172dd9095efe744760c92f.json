{"ast":null,"code":"/*\r\n * World Calendars\r\n * https://github.com/alexcjohnson/world-calendars\r\n *\r\n * Batch-converted from kbwood/calendars\r\n * Many thanks to Keith Wood and all of the contributors to the original project!\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\n\n/* http://keith-wood.name/calendars.html\r\n  Islamic calendar for jQuery v2.0.2.\r\n  Written by Keith Wood (wood.keith{at}optusnet.com.au) August 2009.\r\n  Available under the MIT (http://keith-wood.name/licence.html) license. \r\n  Please attribute the author if you use it. */\nvar main = require('../main');\n\nvar assign = require('object-assign');\n/** Implementation of the Islamic or '16 civil' calendar.\r\n    Based on code from <a href=\"http://www.iranchamber.com/calendar/converter/iranian_calendar_converter.php\">http://www.iranchamber.com/calendar/converter/iranian_calendar_converter.php</a>.\r\n    See also <a href=\"http://en.wikipedia.org/wiki/Islamic_calendar\">http://en.wikipedia.org/wiki/Islamic_calendar</a>.\r\n    @class IslamicCalendar\r\n    @param [language=''] {string} The language code (default English) for localisation. */\n\n\nfunction IslamicCalendar(language) {\n  this.local = this.regionalOptions[language || ''] || this.regionalOptions[''];\n}\n\nIslamicCalendar.prototype = new main.baseCalendar();\nassign(IslamicCalendar.prototype, {\n  /** The calendar name.\r\n      @memberof IslamicCalendar */\n  name: 'Islamic',\n\n  /** Julian date of start of Islamic epoch: 16 July 622 CE.\r\n      @memberof IslamicCalendar */\n  jdEpoch: 1948439.5,\n\n  /** Days per month in a common year.\r\n      @memberof IslamicCalendar */\n  daysPerMonth: [30, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29],\n\n  /** <code>true</code> if has a year zero, <code>false</code> if not.\r\n      @memberof IslamicCalendar */\n  hasYearZero: false,\n\n  /** The minimum month number.\r\n      @memberof IslamicCalendar */\n  minMonth: 1,\n\n  /** The first month in the year.\r\n      @memberof IslamicCalendar */\n  firstMonth: 1,\n\n  /** The minimum day number.\r\n      @memberof IslamicCalendar */\n  minDay: 1,\n\n  /** Localisations for the plugin.\r\n      Entries are objects indexed by the language code ('' being the default US/English).\r\n      Each object has the following attributes.\r\n      @memberof IslamicCalendar\r\n      @property name {string} The calendar name.\r\n      @property epochs {string[]} The epoch names.\r\n      @property monthNames {string[]} The long names of the months of the year.\r\n      @property monthNamesShort {string[]} The short names of the months of the year.\r\n      @property dayNames {string[]} The long names of the days of the week.\r\n      @property dayNamesShort {string[]} The short names of the days of the week.\r\n      @property dayNamesMin {string[]} The minimal names of the days of the week.\r\n      @property dateFormat {string} The date format for this calendar.\r\n              See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\r\n      @property firstDay {number} The number of the first day of the week, starting at 0.\r\n      @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n  regionalOptions: {\n    // Localisations\n    '': {\n      name: 'Islamic',\n      epochs: ['BH', 'AH'],\n      monthNames: ['Muharram', 'Safar', 'Rabi\\' al-awwal', 'Rabi\\' al-thani', 'Jumada al-awwal', 'Jumada al-thani', 'Rajab', 'Sha\\'aban', 'Ramadan', 'Shawwal', 'Dhu al-Qi\\'dah', 'Dhu al-Hijjah'],\n      monthNamesShort: ['Muh', 'Saf', 'Rab1', 'Rab2', 'Jum1', 'Jum2', 'Raj', 'Sha\\'', 'Ram', 'Shaw', 'DhuQ', 'DhuH'],\n      dayNames: ['Yawm al-ahad', 'Yawm al-ithnayn', 'Yawm ath-thulaathaa\\'', 'Yawm al-arbi\\'aa\\'', 'Yawm al-khamÄ«s', 'Yawm al-jum\\'a', 'Yawm as-sabt'],\n      dayNamesShort: ['Aha', 'Ith', 'Thu', 'Arb', 'Kha', 'Jum', 'Sab'],\n      dayNamesMin: ['Ah', 'It', 'Th', 'Ar', 'Kh', 'Ju', 'Sa'],\n      digits: null,\n      dateFormat: 'yyyy/mm/dd',\n      firstDay: 6,\n      isRTL: false\n    }\n  },\n\n  /** Determine whether this date is in a leap year.\r\n      @memberof IslamicCalendar\r\n      @param year {CDate|number} The date to examine or the year to examine.\r\n      @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\r\n      @throws Error if an invalid year or a different calendar used. */\n  leapYear: function leapYear(year) {\n    var date = this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n\n    return (date.year() * 11 + 14) % 30 < 11;\n  },\n\n  /** Determine the week of the year for a date.\r\n      @memberof IslamicCalendar\r\n      @param year {CDate|number} The date to examine or the year to examine.\r\n      @param [month] {number} The month to examine.\r\n      @param [day] {number} The day to examine.\r\n      @return {number} The week of the year.\r\n      @throws Error if an invalid date or a different calendar used. */\n  weekOfYear: function weekOfYear(year, month, day) {\n    // Find Sunday of this week starting on Sunday\n    var checkDate = this.newDate(year, month, day);\n    checkDate.add(-checkDate.dayOfWeek(), 'd');\n    return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1;\n  },\n\n  /** Retrieve the number of days in a year.\r\n      @memberof IslamicCalendar\r\n      @param year {CDate|number} The date to examine or the year to examine.\r\n      @return {number} The number of days.\r\n      @throws Error if an invalid year or a different calendar used. */\n  daysInYear: function daysInYear(year) {\n    return this.leapYear(year) ? 355 : 354;\n  },\n\n  /** Retrieve the number of days in a month.\r\n      @memberof IslamicCalendar\r\n      @param year {CDate|number} The date to examine or the year of the month.\r\n      @param [month] {number} The month.\r\n      @return {number} The number of days in this month.\r\n      @throws Error if an invalid month/year or a different calendar used. */\n  daysInMonth: function daysInMonth(year, month) {\n    var date = this._validate(year, month, this.minDay, main.local.invalidMonth);\n\n    return this.daysPerMonth[date.month() - 1] + (date.month() === 12 && this.leapYear(date.year()) ? 1 : 0);\n  },\n\n  /** Determine whether this date is a week day.\r\n      @memberof IslamicCalendar\r\n      @param year {CDate|number} The date to examine or the year to examine.\r\n      @param [month] {number} The month to examine.\r\n      @param [day] {number} The day to examine.\r\n      @return {boolean} <code>true</code> if a week day, <code>false</code> if not.\r\n      @throws Error if an invalid date or a different calendar used. */\n  weekDay: function weekDay(year, month, day) {\n    return this.dayOfWeek(year, month, day) !== 5;\n  },\n\n  /** Retrieve the Julian date equivalent for this date,\r\n      i.e. days since January 1, 4713 BCE Greenwich noon.\r\n      @memberof IslamicCalendar\r\n      @param year {CDate|number} The date to convert or the year to convert.\r\n      @param [month] {number} The month to convert.\r\n      @param [day] {number} The day to convert.\r\n      @return {number} The equivalent Julian date.\r\n      @throws Error if an invalid date or a different calendar used. */\n  toJD: function toJD(year, month, day) {\n    var date = this._validate(year, month, day, main.local.invalidDate);\n\n    year = date.year();\n    month = date.month();\n    day = date.day();\n    year = year <= 0 ? year + 1 : year;\n    return day + Math.ceil(29.5 * (month - 1)) + (year - 1) * 354 + Math.floor((3 + 11 * year) / 30) + this.jdEpoch - 1;\n  },\n\n  /** Create a new date from a Julian date.\r\n      @memberof IslamicCalendar\r\n      @param jd {number} The Julian date to convert.\r\n      @return {CDate} The equivalent date. */\n  fromJD: function fromJD(jd) {\n    jd = Math.floor(jd) + 0.5;\n    var year = Math.floor((30 * (jd - this.jdEpoch) + 10646) / 10631);\n    year = year <= 0 ? year - 1 : year;\n    var month = Math.min(12, Math.ceil((jd - 29 - this.toJD(year, 1, 1)) / 29.5) + 1);\n    var day = jd - this.toJD(year, month, 1) + 1;\n    return this.newDate(year, month, day);\n  }\n}); // Islamic (16 civil) calendar implementation\n\nmain.calendars.islamic = IslamicCalendar;","map":null,"metadata":{},"sourceType":"script"}