{"ast":null,"code":"'use strict'; // ASCEND: chop off the last nesting level - either [<n>] or .<key> - to ascend\n// the attribute tree. the remaining attrString is in match[1]\n\nvar ASCEND = /^(.*)(\\.[^\\.\\[\\]]+|\\[\\d\\])$/; // SIMPLEATTR: is this an un-nested attribute? (no dots or brackets)\n\nvar SIMPLEATTR = /^[^\\.\\[\\]]+$/;\n/*\r\n * calculate a relative attribute string, similar to a relative path\r\n *\r\n * @param {string} baseAttr:\r\n *   an attribute string, such as 'annotations[3].x'. The \"current location\"\r\n *   is the attribute string minus the last component ('annotations[3]')\r\n * @param {string} relativeAttr:\r\n *   a route to the desired attribute string, using '^' to ascend\r\n *\r\n * @return {string} attrString:\r\n *   for example:\r\n *     relativeAttr('annotations[3].x', 'y') = 'annotations[3].y'\r\n *     relativeAttr('annotations[3].x', '^[2].z') = 'annotations[2].z'\r\n *     relativeAttr('annotations[3].x', '^^margin') = 'margin'\r\n *     relativeAttr('annotations[3].x', '^^margin.r') = 'margin.r'\r\n */\n\nmodule.exports = function (baseAttr, relativeAttr) {\n  while (relativeAttr) {\n    var match = baseAttr.match(ASCEND);\n    if (match) baseAttr = match[1];else if (baseAttr.match(SIMPLEATTR)) baseAttr = '';else throw new Error('bad relativeAttr call:' + [baseAttr, relativeAttr]);\n    if (relativeAttr.charAt(0) === '^') relativeAttr = relativeAttr.slice(1);else break;\n  }\n\n  if (baseAttr && relativeAttr.charAt(0) !== '[') {\n    return baseAttr + '.' + relativeAttr;\n  }\n\n  return baseAttr + relativeAttr;\n};","map":null,"metadata":{},"sourceType":"script"}