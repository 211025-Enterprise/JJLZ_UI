{"ast":null,"code":"'use strict';\n\nvar timeFormat = require('d3-time-format').timeFormat;\n\nvar isNumeric = require('fast-isnumeric');\n\nvar Loggers = require('./loggers');\n\nvar mod = require('./mod').mod;\n\nvar constants = require('../constants/numerical');\n\nvar BADNUM = constants.BADNUM;\nvar ONEDAY = constants.ONEDAY;\nvar ONEHOUR = constants.ONEHOUR;\nvar ONEMIN = constants.ONEMIN;\nvar ONESEC = constants.ONESEC;\nvar EPOCHJD = constants.EPOCHJD;\n\nvar Registry = require('../registry');\n\nvar utcFormat = require('d3-time-format').utcFormat;\n\nvar DATETIME_REGEXP = /^\\s*(-?\\d\\d\\d\\d|\\d\\d)(-(\\d?\\d)(-(\\d?\\d)([ Tt]([01]?\\d|2[0-3])(:([0-5]\\d)(:([0-5]\\d(\\.\\d+)?))?(Z|z|[+\\-]\\d\\d(:?\\d\\d)?)?)?)?)?)?\\s*$/m; // special regex for chinese calendars to support yyyy-mmi-dd etc for intercalary months\n\nvar DATETIME_REGEXP_CN = /^\\s*(-?\\d\\d\\d\\d|\\d\\d)(-(\\d?\\di?)(-(\\d?\\d)([ Tt]([01]?\\d|2[0-3])(:([0-5]\\d)(:([0-5]\\d(\\.\\d+)?))?(Z|z|[+\\-]\\d\\d(:?\\d\\d)?)?)?)?)?)?\\s*$/m; // for 2-digit years, the first year we map them onto\n\nvar YFIRST = new Date().getFullYear() - 70;\n\nfunction isWorldCalendar(calendar) {\n  return calendar && Registry.componentsRegistry.calendars && typeof calendar === 'string' && calendar !== 'gregorian';\n}\n/*\r\n * dateTick0: get the canonical tick for this calendar\r\n *\r\n * integer weekdays : Saturday: 0, Sunday: 1, Monday: 2, etc.\r\n */\n\n\nexports.dateTick0 = function (calendar, dayOfWeek) {\n  var tick0 = _dateTick0(calendar, !!dayOfWeek);\n\n  if (dayOfWeek < 2) return tick0;\n  var v = exports.dateTime2ms(tick0, calendar);\n  v += ONEDAY * (dayOfWeek - 1); // shift Sunday to Monday, etc.\n\n  return exports.ms2DateTime(v, 0, calendar);\n};\n/*\r\n * _dateTick0: get the canonical tick for this calendar\r\n *\r\n * bool sunday is for week ticks, shift it to a Sunday.\r\n */\n\n\nfunction _dateTick0(calendar, sunday) {\n  if (isWorldCalendar(calendar)) {\n    return sunday ? Registry.getComponentMethod('calendars', 'CANONICAL_SUNDAY')[calendar] : Registry.getComponentMethod('calendars', 'CANONICAL_TICK')[calendar];\n  } else {\n    return sunday ? '2000-01-02' : '2000-01-01';\n  }\n}\n/*\r\n * dfltRange: for each calendar, give a valid default range\r\n */\n\n\nexports.dfltRange = function (calendar) {\n  if (isWorldCalendar(calendar)) {\n    return Registry.getComponentMethod('calendars', 'DFLTRANGE')[calendar];\n  } else {\n    return ['2000-01-01', '2001-01-01'];\n  }\n}; // is an object a javascript date?\n\n\nexports.isJSDate = function (v) {\n  return typeof v === 'object' && v !== null && typeof v.getTime === 'function';\n}; // The absolute limits of our date-time system\n// This is a little weird: we use MIN_MS and MAX_MS in dateTime2ms\n// but we use dateTime2ms to calculate them (after defining it!)\n\n\nvar MIN_MS, MAX_MS;\n/**\r\n * dateTime2ms - turn a date object or string s into milliseconds\r\n * (relative to 1970-01-01, per javascript standard)\r\n * optional calendar (string) to use a non-gregorian calendar\r\n *\r\n * Returns BADNUM if it doesn't find a date\r\n *\r\n * strings should have the form:\r\n *\r\n *    -?YYYY-mm-dd<sep>HH:MM:SS.sss<tzInfo>?\r\n *\r\n * <sep>: space (our normal standard) or T or t (ISO-8601)\r\n * <tzInfo>: Z, z, [+\\-]HH:?MM or [+\\-]HH and we THROW IT AWAY\r\n * this format comes from https://tools.ietf.org/html/rfc3339#section-5.6\r\n * and 4.2.5.1 Difference between local time and UTC of day (ISO-8601)\r\n * but we allow it even with a space as the separator\r\n *\r\n * May truncate after any full field, and sss can be any length\r\n * even >3 digits, though javascript dates truncate to milliseconds,\r\n * we keep as much as javascript numeric precision can hold, but we only\r\n * report back up to 100 microsecond precision, because most dates support\r\n * this precision (close to 1970 support more, very far away support less)\r\n *\r\n * Expanded to support negative years to -9999 but you must always\r\n * give 4 digits, except for 2-digit positive years which we assume are\r\n * near the present time.\r\n * Note that we follow ISO 8601:2004: there *is* a year 0, which\r\n * is 1BC/BCE, and -1===2BC etc.\r\n *\r\n * World calendars: not all of these *have* agreed extensions to this full range,\r\n * if you have another calendar system but want a date range outside its validity,\r\n * you can use a gregorian date string prefixed with 'G' or 'g'.\r\n *\r\n * Where to cut off 2-digit years between 1900s and 2000s?\r\n * from https://docs.microsoft.com/en-us/office/troubleshoot/excel/two-digit-year-numbers#the-2029-rule:\r\n *   1930-2029 (the most retro of all...)\r\n * but in my mac chrome from eg. d=new Date(Date.parse('8/19/50')):\r\n *   1950-2049\r\n * by Java, from http://stackoverflow.com/questions/2024273/:\r\n *   now-80 - now+19\r\n * or FileMaker Pro, from\r\n *      https://fmhelp.filemaker.com/help/18/fmp/en/index.html#page/FMP_Help/dates-with-two-digit-years.html:\r\n *   now-70 - now+29\r\n * but python strptime etc, via\r\n *      http://docs.python.org/py3k/library/time.html:\r\n *   1969-2068 (super forward-looking, but static, not sliding!)\r\n *\r\n * lets go with now-70 to now+29, and if anyone runs into this problem\r\n * they can learn the hard way not to use 2-digit years, as no choice we\r\n * make now will cover all possibilities. mostly this will all be taken\r\n * care of in initial parsing, should only be an issue for hand-entered data\r\n * currently (2016) this range is:\r\n *   1946-2045\r\n */\n\nexports.dateTime2ms = function (s, calendar) {\n  // first check if s is a date object\n  if (exports.isJSDate(s)) {\n    // Convert to the UTC milliseconds that give the same\n    // hours as this date has in the local timezone\n    var tzOffset = s.getTimezoneOffset() * ONEMIN;\n    var offsetTweak = (s.getUTCMinutes() - s.getMinutes()) * ONEMIN + (s.getUTCSeconds() - s.getSeconds()) * ONESEC + (s.getUTCMilliseconds() - s.getMilliseconds());\n\n    if (offsetTweak) {\n      var comb = 3 * ONEMIN;\n      tzOffset = tzOffset - comb / 2 + mod(offsetTweak - tzOffset + comb / 2, comb);\n    }\n\n    s = Number(s) - tzOffset;\n    if (s >= MIN_MS && s <= MAX_MS) return s;\n    return BADNUM;\n  } // otherwise only accept strings and numbers\n\n\n  if (typeof s !== 'string' && typeof s !== 'number') return BADNUM;\n  s = String(s);\n  var isWorld = isWorldCalendar(calendar); // to handle out-of-range dates in international calendars, accept\n  // 'G' as a prefix to force the built-in gregorian calendar.\n\n  var s0 = s.charAt(0);\n\n  if (isWorld && (s0 === 'G' || s0 === 'g')) {\n    s = s.substr(1);\n    calendar = '';\n  }\n\n  var isChinese = isWorld && calendar.substr(0, 7) === 'chinese';\n  var match = s.match(isChinese ? DATETIME_REGEXP_CN : DATETIME_REGEXP);\n  if (!match) return BADNUM;\n  var y = match[1];\n  var m = match[3] || '1';\n  var d = Number(match[5] || 1);\n  var H = Number(match[7] || 0);\n  var M = Number(match[9] || 0);\n  var S = Number(match[11] || 0);\n\n  if (isWorld) {\n    // disallow 2-digit years for world calendars\n    if (y.length === 2) return BADNUM;\n    y = Number(y);\n    var cDate;\n\n    try {\n      var calInstance = Registry.getComponentMethod('calendars', 'getCal')(calendar);\n\n      if (isChinese) {\n        var isIntercalary = m.charAt(m.length - 1) === 'i';\n        m = parseInt(m, 10);\n        cDate = calInstance.newDate(y, calInstance.toMonthIndex(y, m, isIntercalary), d);\n      } else {\n        cDate = calInstance.newDate(y, Number(m), d);\n      }\n    } catch (e) {\n      return BADNUM;\n    } // Invalid ... date\n\n\n    if (!cDate) return BADNUM;\n    return (cDate.toJD() - EPOCHJD) * ONEDAY + H * ONEHOUR + M * ONEMIN + S * ONESEC;\n  }\n\n  if (y.length === 2) {\n    y = (Number(y) + 2000 - YFIRST) % 100 + YFIRST;\n  } else y = Number(y); // new Date uses months from 0; subtract 1 here just so we\n  // don't have to do it again during the validity test below\n\n\n  m -= 1; // javascript takes new Date(0..99,m,d) to mean 1900-1999, so\n  // to support years 0-99 we need to use setFullYear explicitly\n  // Note that 2000 is a leap year.\n\n  var date = new Date(Date.UTC(2000, m, d, H, M));\n  date.setUTCFullYear(y);\n  if (date.getUTCMonth() !== m) return BADNUM;\n  if (date.getUTCDate() !== d) return BADNUM;\n  return date.getTime() + S * ONESEC;\n};\n\nMIN_MS = exports.MIN_MS = exports.dateTime2ms('-9999');\nMAX_MS = exports.MAX_MS = exports.dateTime2ms('9999-12-31 23:59:59.9999'); // is string s a date? (see above)\n\nexports.isDateTime = function (s, calendar) {\n  return exports.dateTime2ms(s, calendar) !== BADNUM;\n}; // pad a number with zeroes, to given # of digits before the decimal point\n\n\nfunction lpad(val, digits) {\n  return String(val + Math.pow(10, digits)).substr(1);\n}\n/**\r\n * Turn ms into string of the form YYYY-mm-dd HH:MM:SS.ssss\r\n * Crop any trailing zeros in time, except never stop right after hours\r\n * (we could choose to crop '-01' from date too but for now we always\r\n * show the whole date)\r\n * Optional range r is the data range that applies, also in ms.\r\n * If rng is big, the later parts of time will be omitted\r\n */\n\n\nvar NINETYDAYS = 90 * ONEDAY;\nvar THREEHOURS = 3 * ONEHOUR;\nvar FIVEMIN = 5 * ONEMIN;\n\nexports.ms2DateTime = function (ms, r, calendar) {\n  if (typeof ms !== 'number' || !(ms >= MIN_MS && ms <= MAX_MS)) return BADNUM;\n  if (!r) r = 0;\n  var msecTenths = Math.floor(mod(ms + 0.05, 1) * 10);\n  var msRounded = Math.round(ms - msecTenths / 10);\n  var dateStr, h, m, s, msec10, d;\n\n  if (isWorldCalendar(calendar)) {\n    var dateJD = Math.floor(msRounded / ONEDAY) + EPOCHJD;\n    var timeMs = Math.floor(mod(ms, ONEDAY));\n\n    try {\n      dateStr = Registry.getComponentMethod('calendars', 'getCal')(calendar).fromJD(dateJD).formatDate('yyyy-mm-dd');\n    } catch (e) {\n      // invalid date in this calendar - fall back to Gyyyy-mm-dd\n      dateStr = utcFormat('G%Y-%m-%d')(new Date(msRounded));\n    } // yyyy does NOT guarantee 4-digit years. YYYY mostly does, but does\n    // other things for a few calendars, so we can't trust it. Just pad\n    // it manually (after the '-' if there is one)\n\n\n    if (dateStr.charAt(0) === '-') {\n      while (dateStr.length < 11) {\n        dateStr = '-0' + dateStr.substr(1);\n      }\n    } else {\n      while (dateStr.length < 10) {\n        dateStr = '0' + dateStr;\n      }\n    } // TODO: if this is faster, we could use this block for extracting\n    // the time components of regular gregorian too\n\n\n    h = r < NINETYDAYS ? Math.floor(timeMs / ONEHOUR) : 0;\n    m = r < NINETYDAYS ? Math.floor(timeMs % ONEHOUR / ONEMIN) : 0;\n    s = r < THREEHOURS ? Math.floor(timeMs % ONEMIN / ONESEC) : 0;\n    msec10 = r < FIVEMIN ? timeMs % ONESEC * 10 + msecTenths : 0;\n  } else {\n    d = new Date(msRounded);\n    dateStr = utcFormat('%Y-%m-%d')(d); // <90 days: add hours and minutes - never *only* add hours\n\n    h = r < NINETYDAYS ? d.getUTCHours() : 0;\n    m = r < NINETYDAYS ? d.getUTCMinutes() : 0; // <3 hours: add seconds\n\n    s = r < THREEHOURS ? d.getUTCSeconds() : 0; // <5 minutes: add ms (plus one extra digit, this is msec*10)\n\n    msec10 = r < FIVEMIN ? d.getUTCMilliseconds() * 10 + msecTenths : 0;\n  }\n\n  return includeTime(dateStr, h, m, s, msec10);\n}; // For converting old-style milliseconds to date strings,\n// we use the local timezone rather than UTC like we use\n// everywhere else, both for backward compatibility and\n// because that's how people mostly use javasript date objects.\n// Clip one extra day off our date range though so we can't get\n// thrown beyond the range by the timezone shift.\n\n\nexports.ms2DateTimeLocal = function (ms) {\n  if (!(ms >= MIN_MS + ONEDAY && ms <= MAX_MS - ONEDAY)) return BADNUM;\n  var msecTenths = Math.floor(mod(ms + 0.05, 1) * 10);\n  var d = new Date(Math.round(ms - msecTenths / 10));\n  var dateStr = timeFormat('%Y-%m-%d')(d);\n  var h = d.getHours();\n  var m = d.getMinutes();\n  var s = d.getSeconds();\n  var msec10 = d.getUTCMilliseconds() * 10 + msecTenths;\n  return includeTime(dateStr, h, m, s, msec10);\n};\n\nfunction includeTime(dateStr, h, m, s, msec10) {\n  // include each part that has nonzero data in or after it\n  if (h || m || s || msec10) {\n    dateStr += ' ' + lpad(h, 2) + ':' + lpad(m, 2);\n\n    if (s || msec10) {\n      dateStr += ':' + lpad(s, 2);\n\n      if (msec10) {\n        var digits = 4;\n\n        while (msec10 % 10 === 0) {\n          digits -= 1;\n          msec10 /= 10;\n        }\n\n        dateStr += '.' + lpad(msec10, digits);\n      }\n    }\n  }\n\n  return dateStr;\n} // normalize date format to date string, in case it starts as\n// a Date object or milliseconds\n// optional dflt is the return value if cleaning fails\n\n\nexports.cleanDate = function (v, dflt, calendar) {\n  // let us use cleanDate to provide a missing default without an error\n  if (v === BADNUM) return dflt;\n\n  if (exports.isJSDate(v) || typeof v === 'number' && isFinite(v)) {\n    // do not allow milliseconds (old) or jsdate objects (inherently\n    // described as gregorian dates) with world calendars\n    if (isWorldCalendar(calendar)) {\n      Loggers.error('JS Dates and milliseconds are incompatible with world calendars', v);\n      return dflt;\n    } // NOTE: if someone puts in a year as a number rather than a string,\n    // this will mistakenly convert it thinking it's milliseconds from 1970\n    // that is: '2012' -> Jan. 1, 2012, but 2012 -> 2012 epoch milliseconds\n\n\n    v = exports.ms2DateTimeLocal(+v);\n    if (!v && dflt !== undefined) return dflt;\n  } else if (!exports.isDateTime(v, calendar)) {\n    Loggers.error('unrecognized date', v);\n    return dflt;\n  }\n\n  return v;\n};\n/*\r\n *  Date formatting for ticks and hovertext\r\n */\n\n/*\r\n * modDateFormat: Support world calendars, and add two items to\r\n * d3's vocabulary:\r\n * %{n}f where n is the max number of digits of fractional seconds\r\n * %h formats: half of the year as a decimal number [1,2]\r\n */\n\n\nvar fracMatch = /%\\d?f/g;\nvar halfYearMatch = /%h/g;\nvar quarterToHalfYear = {\n  '1': '1',\n  '2': '1',\n  '3': '2',\n  '4': '2'\n};\n\nfunction modDateFormat(fmt, x, formatter, calendar) {\n  fmt = fmt.replace(fracMatch, function (match) {\n    var digits = Math.min(+match.charAt(1) || 6, 6);\n    var fracSecs = (x / 1000 % 1 + 2).toFixed(digits).substr(2).replace(/0+$/, '') || '0';\n    return fracSecs;\n  });\n  var d = new Date(Math.floor(x + 0.05));\n  fmt = fmt.replace(halfYearMatch, function () {\n    return quarterToHalfYear[formatter('%q')(d)];\n  });\n\n  if (isWorldCalendar(calendar)) {\n    try {\n      fmt = Registry.getComponentMethod('calendars', 'worldCalFmt')(fmt, x, calendar);\n    } catch (e) {\n      return 'Invalid';\n    }\n  }\n\n  return formatter(fmt)(d);\n}\n/*\r\n * formatTime: create a time string from:\r\n *   x: milliseconds\r\n *   tr: tickround ('M', 'S', or # digits)\r\n * only supports UTC times (where every day is 24 hours and 0 is at midnight)\r\n */\n\n\nvar MAXSECONDS = [59, 59.9, 59.99, 59.999, 59.9999];\n\nfunction formatTime(x, tr) {\n  var timePart = mod(x + 0.05, ONEDAY);\n  var timeStr = lpad(Math.floor(timePart / ONEHOUR), 2) + ':' + lpad(mod(Math.floor(timePart / ONEMIN), 60), 2);\n\n  if (tr !== 'M') {\n    if (!isNumeric(tr)) tr = 0; // should only be 'S'\n\n    /*\r\n     * this is a weird one - and shouldn't come up unless people\r\n     * monkey with tick0 in weird ways, but we need to do something!\r\n     * IN PARTICULAR we had better not display garbage (see below)\r\n     * for numbers we always round to the nearest increment of the\r\n     * precision we're showing, and this seems like the right way to\r\n     * handle seconds and milliseconds, as they have a decimal point\r\n     * and people will interpret that to mean rounding like numbers.\r\n     * but for larger increments we floor the value: it's always\r\n     * 2013 until the ball drops on the new year. We could argue about\r\n     * which field it is where we start rounding (should 12:08:59\r\n     * round to 12:09 if we're stopping at minutes?) but for now I'll\r\n     * say we round seconds but floor everything else. BUT that means\r\n     * we need to never round up to 60 seconds, ie 23:59:60\r\n     */\n\n    var sec = Math.min(mod(x / ONESEC, 60), MAXSECONDS[tr]);\n    var secStr = (100 + sec).toFixed(tr).substr(1);\n\n    if (tr > 0) {\n      secStr = secStr.replace(/0+$/, '').replace(/[\\.]$/, '');\n    }\n\n    timeStr += ':' + secStr;\n  }\n\n  return timeStr;\n}\n/*\r\n * formatDate: turn a date into tick or hover label text.\r\n *\r\n *   x: milliseconds, the value to convert\r\n *   fmt: optional, an explicit format string (d3 format, even for world calendars)\r\n *   tr: tickround ('y', 'm', 'd', 'M', 'S', or # digits)\r\n *      used if no explicit fmt is provided\r\n *   formatter: locale-aware d3 date formatter for standard gregorian calendars\r\n *      should be the result of exports.getD3DateFormat(gd)\r\n *   calendar: optional string, the world calendar system to use\r\n *\r\n * returns the date/time as a string, potentially with the leading portion\r\n * on a separate line (after '\\n')\r\n * Note that this means if you provide an explicit format which includes '\\n'\r\n * the axis may choose to strip things after it when they don't change from\r\n * one tick to the next (as it does with automatic formatting)\r\n */\n\n\nexports.formatDate = function (x, fmt, tr, formatter, calendar, extraFormat) {\n  calendar = isWorldCalendar(calendar) && calendar;\n\n  if (!fmt) {\n    if (tr === 'y') fmt = extraFormat.year;else if (tr === 'm') fmt = extraFormat.month;else if (tr === 'd') {\n      fmt = extraFormat.dayMonth + '\\n' + extraFormat.year;\n    } else {\n      return formatTime(x, tr) + '\\n' + modDateFormat(extraFormat.dayMonthYear, x, formatter, calendar);\n    }\n  }\n\n  return modDateFormat(fmt, x, formatter, calendar);\n};\n/*\r\n * incrementMonth: make a new milliseconds value from the given one,\r\n * having changed the month\r\n *\r\n * special case for world calendars: multiples of 12 are treated as years,\r\n * even for calendar systems that don't have (always or ever) 12 months/year\r\n * TODO: perhaps we need a different code for year increments to support this?\r\n *\r\n * ms (number): the initial millisecond value\r\n * dMonth (int): the (signed) number of months to shift\r\n * calendar (string): the calendar system to use\r\n *\r\n * changing month does not (and CANNOT) always preserve day, since\r\n * months have different lengths. The worst example of this is:\r\n *   d = new Date(1970,0,31); d.setMonth(1) -> Feb 31 turns into Mar 3\r\n *\r\n * But we want to be able to iterate over the last day of each month,\r\n * regardless of what its number is.\r\n * So shift 3 days forward, THEN set the new month, then unshift:\r\n *   1/31 -> 2/28 (or 29) -> 3/31 -> 4/30 -> ...\r\n *\r\n * Note that odd behavior still exists if you start from the 26th-28th:\r\n *   1/28 -> 2/28 -> 3/31\r\n * but at least you can't shift any dates into the wrong month,\r\n * and ticks on these days incrementing by month would be very unusual\r\n */\n\n\nvar THREEDAYS = 3 * ONEDAY;\n\nexports.incrementMonth = function (ms, dMonth, calendar) {\n  calendar = isWorldCalendar(calendar) && calendar; // pull time out and operate on pure dates, then add time back at the end\n  // this gives maximum precision - not that we *normally* care if we're\n  // incrementing by month, but better to be safe!\n\n  var timeMs = mod(ms, ONEDAY);\n  ms = Math.round(ms - timeMs);\n\n  if (calendar) {\n    try {\n      var dateJD = Math.round(ms / ONEDAY) + EPOCHJD;\n      var calInstance = Registry.getComponentMethod('calendars', 'getCal')(calendar);\n      var cDate = calInstance.fromJD(dateJD);\n      if (dMonth % 12) calInstance.add(cDate, dMonth, 'm');else calInstance.add(cDate, dMonth / 12, 'y');\n      return (cDate.toJD() - EPOCHJD) * ONEDAY + timeMs;\n    } catch (e) {\n      Loggers.error('invalid ms ' + ms + ' in calendar ' + calendar); // then keep going in gregorian even though the result will be 'Invalid'\n    }\n  }\n\n  var y = new Date(ms + THREEDAYS);\n  return y.setUTCMonth(y.getUTCMonth() + dMonth) + timeMs - THREEDAYS;\n};\n/*\r\n * findExactDates: what fraction of data is exact days, months, or years?\r\n *\r\n * data: array of millisecond values\r\n * calendar (string) the calendar to test against\r\n */\n\n\nexports.findExactDates = function (data, calendar) {\n  var exactYears = 0;\n  var exactMonths = 0;\n  var exactDays = 0;\n  var blankCount = 0;\n  var d;\n  var di;\n  var calInstance = isWorldCalendar(calendar) && Registry.getComponentMethod('calendars', 'getCal')(calendar);\n\n  for (var i = 0; i < data.length; i++) {\n    di = data[i]; // not date data at all\n\n    if (!isNumeric(di)) {\n      blankCount++;\n      continue;\n    } // not an exact date\n\n\n    if (di % ONEDAY) continue;\n\n    if (calInstance) {\n      try {\n        d = calInstance.fromJD(di / ONEDAY + EPOCHJD);\n\n        if (d.day() === 1) {\n          if (d.month() === 1) exactYears++;else exactMonths++;\n        } else exactDays++;\n      } catch (e) {// invalid date in this calendar - ignore it here.\n      }\n    } else {\n      d = new Date(di);\n\n      if (d.getUTCDate() === 1) {\n        if (d.getUTCMonth() === 0) exactYears++;else exactMonths++;\n      } else exactDays++;\n    }\n  }\n\n  exactMonths += exactYears;\n  exactDays += exactMonths;\n  var dataCount = data.length - blankCount;\n  return {\n    exactYears: exactYears / dataCount,\n    exactMonths: exactMonths / dataCount,\n    exactDays: exactDays / dataCount\n  };\n};","map":null,"metadata":{},"sourceType":"script"}