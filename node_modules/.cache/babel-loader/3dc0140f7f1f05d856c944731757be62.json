{"ast":null,"code":"'use strict';\n\nvar timerCache = {};\n/**\r\n * Throttle a callback. `callback` executes synchronously only if\r\n * more than `minInterval` milliseconds have already elapsed since the latest\r\n * call (if any). Otherwise we wait until `minInterval` is over and execute the\r\n * last callback received while waiting.\r\n * So the first and last events in a train are always executed (eventually)\r\n * but some of the events in the middle can be dropped.\r\n *\r\n * @param {string} id: an identifier to mark events to throttle together\r\n * @param {number} minInterval: minimum time, in milliseconds, between\r\n *   invocations of `callback`\r\n * @param {function} callback: the function to throttle. `callback` itself\r\n *   should be a purely synchronous function.\r\n */\n\nexports.throttle = function throttle(id, minInterval, callback) {\n  var cache = timerCache[id];\n  var now = Date.now();\n\n  if (!cache) {\n    /*\r\n     * Throw out old items before making a new one, to prevent the cache\r\n     * getting overgrown, for example from old plots that have been replaced.\r\n     * 1 minute age is arbitrary.\r\n     */\n    for (var idi in timerCache) {\n      if (timerCache[idi].ts < now - 60000) {\n        delete timerCache[idi];\n      }\n    }\n\n    cache = timerCache[id] = {\n      ts: 0,\n      timer: null\n    };\n  }\n\n  _clearTimeout(cache);\n\n  function exec() {\n    callback();\n    cache.ts = Date.now();\n\n    if (cache.onDone) {\n      cache.onDone();\n      cache.onDone = null;\n    }\n  }\n\n  if (now > cache.ts + minInterval) {\n    exec();\n    return;\n  }\n\n  cache.timer = setTimeout(function () {\n    exec();\n    cache.timer = null;\n  }, minInterval);\n};\n\nexports.done = function (id) {\n  var cache = timerCache[id];\n  if (!cache || !cache.timer) return Promise.resolve();\n  return new Promise(function (resolve) {\n    var previousOnDone = cache.onDone;\n\n    cache.onDone = function onDone() {\n      if (previousOnDone) previousOnDone();\n      resolve();\n      cache.onDone = null;\n    };\n  });\n};\n/**\r\n * Clear the throttle cache for one or all timers\r\n * @param {optional string} id:\r\n *   if provided, clear just this timer\r\n *   if omitted, clear all timers (mainly useful for testing)\r\n */\n\n\nexports.clear = function (id) {\n  if (id) {\n    _clearTimeout(timerCache[id]);\n\n    delete timerCache[id];\n  } else {\n    for (var idi in timerCache) {\n      exports.clear(idi);\n    }\n  }\n};\n\nfunction _clearTimeout(cache) {\n  if (cache && cache.timer !== null) {\n    clearTimeout(cache.timer);\n    cache.timer = null;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}