{"ast":null,"code":"/*\r\n * World Calendars\r\n * https://github.com/alexcjohnson/world-calendars\r\n *\r\n * Batch-converted from kbwood/calendars\r\n * Many thanks to Keith Wood and all of the contributors to the original project!\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\n\n/* http://keith-wood.name/calendars.html\r\n  Mayan calendar for jQuery v2.0.2.\r\n  Written by Keith Wood (wood.keith{at}optusnet.com.au) August 2009.\r\n  Available under the MIT (http://keith-wood.name/licence.html) license. \r\n  Please attribute the author if you use it. */\nvar main = require('../main');\n\nvar assign = require('object-assign');\n/** Implementation of the Mayan Long Count calendar.\r\n    See also <a href=\"http://en.wikipedia.org/wiki/Mayan_calendar\">http://en.wikipedia.org/wiki/Mayan_calendar</a>.\r\n    @class MayanCalendar\r\n    @param [language=''] {string} The language code (default English) for localisation. */\n\n\nfunction MayanCalendar(language) {\n  this.local = this.regionalOptions[language || ''] || this.regionalOptions[''];\n}\n\nMayanCalendar.prototype = new main.baseCalendar();\nassign(MayanCalendar.prototype, {\n  /** The calendar name.\r\n      @memberof MayanCalendar */\n  name: 'Mayan',\n\n  /** Julian date of start of Mayan epoch: 11 August 3114 BCE.\r\n      @memberof MayanCalendar */\n  jdEpoch: 584282.5,\n\n  /** <code>true</code> if has a year zero, <code>false</code> if not.\r\n      @memberof MayanCalendar */\n  hasYearZero: true,\n\n  /** The minimum month number.\r\n      @memberof MayanCalendar */\n  minMonth: 0,\n\n  /** The first month in the year.\r\n      @memberof MayanCalendar */\n  firstMonth: 0,\n\n  /** The minimum day number.\r\n      @memberof MayanCalendar */\n  minDay: 0,\n\n  /** Localisations for the plugin.\r\n      Entries are objects indexed by the language code ('' being the default US/English).\r\n      Each object has the following attributes.\r\n      @memberof MayanCalendar\r\n      @property name {string} The calendar name.\r\n      @property epochs {string[]} The epoch names.\r\n      @property monthNames {string[]} The long names of the months of the year.\r\n      @property monthNamesShort {string[]} The short names of the months of the year.\r\n      @property dayNames {string[]} The long names of the days of the week.\r\n      @property dayNamesShort {string[]} The short names of the days of the week.\r\n      @property dayNamesMin {string[]} The minimal names of the days of the week.\r\n      @property dateFormat {string} The date format for this calendar.\r\n              See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\r\n      @property firstDay {number} The number of the first day of the week, starting at 0.\r\n      @property isRTL {number} <code>true</code> if this localisation reads right-to-left.\r\n      @property haabMonths {string[]} The names of the Haab months.\r\n      @property tzolkinMonths {string[]} The names of the Tzolkin months. */\n  regionalOptions: {\n    // Localisations\n    '': {\n      name: 'Mayan',\n      epochs: ['', ''],\n      monthNames: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17'],\n      monthNamesShort: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17'],\n      dayNames: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19'],\n      dayNamesShort: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19'],\n      dayNamesMin: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19'],\n      digits: null,\n      dateFormat: 'YYYY.m.d',\n      firstDay: 0,\n      isRTL: false,\n      haabMonths: ['Pop', 'Uo', 'Zip', 'Zotz', 'Tzec', 'Xul', 'Yaxkin', 'Mol', 'Chen', 'Yax', 'Zac', 'Ceh', 'Mac', 'Kankin', 'Muan', 'Pax', 'Kayab', 'Cumku', 'Uayeb'],\n      tzolkinMonths: ['Imix', 'Ik', 'Akbal', 'Kan', 'Chicchan', 'Cimi', 'Manik', 'Lamat', 'Muluc', 'Oc', 'Chuen', 'Eb', 'Ben', 'Ix', 'Men', 'Cib', 'Caban', 'Etznab', 'Cauac', 'Ahau']\n    }\n  },\n\n  /** Determine whether this date is in a leap year.\r\n      @memberof MayanCalendar\r\n      @param year {CDate|number} The date to examine or the year to examine.\r\n      @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\r\n      @throws Error if an invalid year or a different calendar used. */\n  leapYear: function leapYear(year) {\n    this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n\n    return false;\n  },\n\n  /** Format the year, if not a simple sequential number.\r\n      @memberof MayanCalendar\r\n      @param year {CDate|number} The date to format or the year to format.\r\n      @return {string} The formatted year.\r\n      @throws Error if an invalid year or a different calendar used. */\n  formatYear: function formatYear(year) {\n    var date = this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n\n    year = date.year();\n    var baktun = Math.floor(year / 400);\n    year = year % 400;\n    year += year < 0 ? 400 : 0;\n    var katun = Math.floor(year / 20);\n    return baktun + '.' + katun + '.' + year % 20;\n  },\n\n  /** Convert from the formatted year back to a single number.\r\n      @memberof MayanCalendar\r\n      @param years {string} The year as n.n.n.\r\n      @return {number} The sequential year.\r\n      @throws Error if an invalid value is supplied. */\n  forYear: function forYear(years) {\n    years = years.split('.');\n\n    if (years.length < 3) {\n      throw 'Invalid Mayan year';\n    }\n\n    var year = 0;\n\n    for (var i = 0; i < years.length; i++) {\n      var y = parseInt(years[i], 10);\n\n      if (Math.abs(y) > 19 || i > 0 && y < 0) {\n        throw 'Invalid Mayan year';\n      }\n\n      year = year * 20 + y;\n    }\n\n    return year;\n  },\n\n  /** Retrieve the number of months in a year.\r\n      @memberof MayanCalendar\r\n      @param year {CDate|number} The date to examine or the year to examine.\r\n      @return {number} The number of months.\r\n      @throws Error if an invalid year or a different calendar used. */\n  monthsInYear: function monthsInYear(year) {\n    this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n\n    return 18;\n  },\n\n  /** Determine the week of the year for a date.\r\n      @memberof MayanCalendar\r\n      @param year {CDate|number} The date to examine or the year to examine.\r\n      @param [month] {number} The month to examine.\r\n      @param [day] {number} The day to examine.\r\n      @return {number} The week of the year.\r\n      @throws Error if an invalid date or a different calendar used. */\n  weekOfYear: function weekOfYear(year, month, day) {\n    this._validate(year, month, day, main.local.invalidDate);\n\n    return 0;\n  },\n\n  /** Retrieve the number of days in a year.\r\n      @memberof MayanCalendar\r\n      @param year {CDate|number} The date to examine or the year to examine.\r\n      @return {number} The number of days.\r\n      @throws Error if an invalid year or a different calendar used. */\n  daysInYear: function daysInYear(year) {\n    this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n\n    return 360;\n  },\n\n  /** Retrieve the number of days in a month.\r\n      @memberof MayanCalendar\r\n      @param year {CDate|number} The date to examine or the year of the month.\r\n      @param [month] {number} The month.\r\n      @return {number} The number of days in this month.\r\n      @throws Error if an invalid month/year or a different calendar used. */\n  daysInMonth: function daysInMonth(year, month) {\n    this._validate(year, month, this.minDay, main.local.invalidMonth);\n\n    return 20;\n  },\n\n  /** Retrieve the number of days in a week.\r\n      @memberof MayanCalendar\r\n      @return {number} The number of days. */\n  daysInWeek: function daysInWeek() {\n    return 5; // Just for formatting\n  },\n\n  /** Retrieve the day of the week for a date.\r\n      @memberof MayanCalendar\r\n      @param year {CDate|number} The date to examine or the year to examine.\r\n      @param [month] {number} The month to examine.\r\n      @param [day] {number} The day to examine.\r\n      @return {number} The day of the week: 0 to number of days - 1.\r\n      @throws Error if an invalid date or a different calendar used. */\n  dayOfWeek: function dayOfWeek(year, month, day) {\n    var date = this._validate(year, month, day, main.local.invalidDate);\n\n    return date.day();\n  },\n\n  /** Determine whether this date is a week day.\r\n      @memberof MayanCalendar\r\n      @param year {CDate|number} The date to examine or the year to examine.\r\n      @param [month] {number} The month to examine.\r\n      @param [day] {number} The day to examine.\r\n      @return {boolean} <code>true</code> if a week day, <code>false</code> if not.\r\n      @throws Error if an invalid date or a different calendar used. */\n  weekDay: function weekDay(year, month, day) {\n    this._validate(year, month, day, main.local.invalidDate);\n\n    return true;\n  },\n\n  /** Retrieve additional information about a date - Haab and Tzolkin equivalents.\r\n      @memberof MayanCalendar\r\n      @param year {CDate|number} The date to examine or the year to examine.\r\n      @param [month] {number} The month to examine.\r\n      @param [day] {number} The day to examine.\r\n      @return {object} Additional information - contents depends on calendar.\r\n      @throws Error if an invalid date or a different calendar used. */\n  extraInfo: function extraInfo(year, month, day) {\n    var date = this._validate(year, month, day, main.local.invalidDate);\n\n    var jd = date.toJD();\n\n    var haab = this._toHaab(jd);\n\n    var tzolkin = this._toTzolkin(jd);\n\n    return {\n      haabMonthName: this.local.haabMonths[haab[0] - 1],\n      haabMonth: haab[0],\n      haabDay: haab[1],\n      tzolkinDayName: this.local.tzolkinMonths[tzolkin[0] - 1],\n      tzolkinDay: tzolkin[0],\n      tzolkinTrecena: tzolkin[1]\n    };\n  },\n\n  /** Retrieve Haab date from a Julian date.\r\n      @memberof MayanCalendar\r\n      @private\r\n      @param jd  {number} The Julian date.\r\n      @return {number[]} Corresponding Haab month and day. */\n  _toHaab: function _toHaab(jd) {\n    jd -= this.jdEpoch;\n    var day = mod(jd + 8 + (18 - 1) * 20, 365);\n    return [Math.floor(day / 20) + 1, mod(day, 20)];\n  },\n\n  /** Retrieve Tzolkin date from a Julian date.\r\n      @memberof MayanCalendar\r\n      @private\r\n      @param jd {number} The Julian date.\r\n      @return {number[]} Corresponding Tzolkin day and trecena. */\n  _toTzolkin: function _toTzolkin(jd) {\n    jd -= this.jdEpoch;\n    return [amod(jd + 20, 20), amod(jd + 4, 13)];\n  },\n\n  /** Retrieve the Julian date equivalent for this date,\r\n      i.e. days since January 1, 4713 BCE Greenwich noon.\r\n      @memberof MayanCalendar\r\n      @param year {CDate|number} The date to convert or the year to convert.\r\n      @param [month] {number} The month to convert.\r\n      @param [day] {number} The day to convert.\r\n      @return {number} The equivalent Julian date.\r\n      @throws Error if an invalid date or a different calendar used. */\n  toJD: function toJD(year, month, day) {\n    var date = this._validate(year, month, day, main.local.invalidDate);\n\n    return date.day() + date.month() * 20 + date.year() * 360 + this.jdEpoch;\n  },\n\n  /** Create a new date from a Julian date.\r\n      @memberof MayanCalendar\r\n      @param jd {number} The Julian date to convert.\r\n      @return {CDate} The equivalent date. */\n  fromJD: function fromJD(jd) {\n    jd = Math.floor(jd) + 0.5 - this.jdEpoch;\n    var year = Math.floor(jd / 360);\n    jd = jd % 360;\n    jd += jd < 0 ? 360 : 0;\n    var month = Math.floor(jd / 20);\n    var day = jd % 20;\n    return this.newDate(year, month, day);\n  }\n}); // Modulus function which works for non-integers.\n\nfunction mod(a, b) {\n  return a - b * Math.floor(a / b);\n} // Modulus function which returns numerator if modulus is zero.\n\n\nfunction amod(a, b) {\n  return mod(a - 1, b) + 1;\n} // Mayan calendar implementation\n\n\nmain.calendars.mayan = MayanCalendar;","map":null,"metadata":{},"sourceType":"script"}