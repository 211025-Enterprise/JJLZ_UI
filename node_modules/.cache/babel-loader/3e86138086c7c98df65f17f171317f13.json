{"ast":null,"code":"/*\r\n * World Calendars\r\n * https://github.com/alexcjohnson/world-calendars\r\n *\r\n * Batch-converted from kbwood/calendars\r\n * Many thanks to Keith Wood and all of the contributors to the original project!\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\n\n/* http://keith-wood.name/calendars.html\r\n  Calendars for jQuery v2.0.2.\r\n  Written by Keith Wood (wood.keith{at}optusnet.com.au) August 2009.\r\n  Available under the MIT (http://keith-wood.name/licence.html) license. \r\n  Please attribute the author if you use it. */\nvar assign = require('object-assign');\n\nfunction Calendars() {\n  this.regionalOptions = [];\n  this.regionalOptions[''] = {\n    invalidCalendar: 'Calendar {0} not found',\n    invalidDate: 'Invalid {0} date',\n    invalidMonth: 'Invalid {0} month',\n    invalidYear: 'Invalid {0} year',\n    differentCalendars: 'Cannot mix {0} and {1} dates'\n  };\n  this.local = this.regionalOptions[''];\n  this.calendars = {};\n  this._localCals = {};\n}\n/** Create the calendars plugin.\r\n    <p>Provides support for various world calendars in a consistent manner.</p>\r\n     @class Calendars\r\n    @example _exports.instance('julian').newDate(2014, 12, 25) */\n\n\nassign(Calendars.prototype, {\n  /** Obtain a calendar implementation and localisation.\r\n      @memberof Calendars\r\n      @param [name='gregorian'] {string} The name of the calendar, e.g. 'gregorian', 'persian', 'islamic'.\r\n      @param [language=''] {string} The language code to use for localisation (default is English).\r\n      @return {Calendar} The calendar and localisation.\r\n      @throws Error if calendar not found. */\n  instance: function instance(name, language) {\n    name = (name || 'gregorian').toLowerCase();\n    language = language || '';\n    var cal = this._localCals[name + '-' + language];\n\n    if (!cal && this.calendars[name]) {\n      cal = new this.calendars[name](language);\n      this._localCals[name + '-' + language] = cal;\n    }\n\n    if (!cal) {\n      throw (this.local.invalidCalendar || this.regionalOptions[''].invalidCalendar).replace(/\\{0\\}/, name);\n    }\n\n    return cal;\n  },\n\n  /** Create a new date - for today if no other parameters given.\r\n      @memberof Calendars\r\n      @param year {CDate|number} The date to copy or the year for the date.\r\n      @param [month] {number} The month for the date.\r\n      @param [day] {number} The day for the date.\r\n      @param [calendar='gregorian'] {BaseCalendar|string} The underlying calendar or the name of the calendar.\r\n      @param [language=''] {string} The language to use for localisation (default English).\r\n      @return {CDate} The new date.\r\n      @throws Error if an invalid date. */\n  newDate: function newDate(year, month, day, calendar, language) {\n    calendar = (year != null && year.year ? year.calendar() : typeof calendar === 'string' ? this.instance(calendar, language) : calendar) || this.instance();\n    return calendar.newDate(year, month, day);\n  },\n\n  /** A simple digit substitution function for localising numbers via the Calendar digits option.\r\n      @member Calendars\r\n      @param digits {string[]} The substitute digits, for 0 through 9.\r\n      @return {function} The substitution function. */\n  substituteDigits: function substituteDigits(digits) {\n    return function (value) {\n      return (value + '').replace(/[0-9]/g, function (digit) {\n        return digits[digit];\n      });\n    };\n  },\n\n  /** Digit substitution function for localising Chinese style numbers via the Calendar digits option.\r\n      @member Calendars\r\n      @param digits {string[]} The substitute digits, for 0 through 9.\r\n      @param powers {string[]} The characters denoting powers of 10, i.e. 1, 10, 100, 1000.\r\n      @return {function} The substitution function. */\n  substituteChineseDigits: function substituteChineseDigits(digits, powers) {\n    return function (value) {\n      var localNumber = '';\n      var power = 0;\n\n      while (value > 0) {\n        var units = value % 10;\n        localNumber = (units === 0 ? '' : digits[units] + powers[power]) + localNumber;\n        power++;\n        value = Math.floor(value / 10);\n      }\n\n      if (localNumber.indexOf(digits[1] + powers[1]) === 0) {\n        localNumber = localNumber.substr(1);\n      }\n\n      return localNumber || digits[0];\n    };\n  }\n});\n/** Generic date, based on a particular calendar.\r\n    @class CDate\r\n    @param calendar {BaseCalendar} The underlying calendar implementation.\r\n    @param year {number} The year for this date.\r\n    @param month {number} The month for this date.\r\n    @param day {number} The day for this date.\r\n    @return {CDate} The date object.\r\n    @throws Error if an invalid date. */\n\nfunction CDate(calendar, year, month, day) {\n  this._calendar = calendar;\n  this._year = year;\n  this._month = month;\n  this._day = day;\n\n  if (this._calendar._validateLevel === 0 && !this._calendar.isValid(this._year, this._month, this._day)) {\n    throw (_exports.local.invalidDate || _exports.regionalOptions[''].invalidDate).replace(/\\{0\\}/, this._calendar.local.name);\n  }\n}\n/** Pad a numeric value with leading zeroes.\r\n    @private\r\n    @param value {number} The number to format.\r\n    @param length {number} The minimum length.\r\n    @return {string} The formatted number. */\n\n\nfunction pad(value, length) {\n  value = '' + value;\n  return '000000'.substring(0, length - value.length) + value;\n}\n\nassign(CDate.prototype, {\n  /** Create a new date.\r\n      @memberof CDate\r\n      @param [year] {CDate|number} The date to copy or the year for the date (default this date).\r\n      @param [month] {number} The month for the date.\r\n      @param [day] {number} The day for the date.\r\n      @return {CDate} The new date.\r\n      @throws Error if an invalid date. */\n  newDate: function newDate(year, month, day) {\n    return this._calendar.newDate(year == null ? this : year, month, day);\n  },\n\n  /** Set or retrieve the year for this date.\r\n      @memberof CDate\r\n      @param [year] {number} The year for the date.\r\n      @return {number|CDate} The date's year (if no parameter) or the updated date.\r\n      @throws Error if an invalid date. */\n  year: function year(_year) {\n    return arguments.length === 0 ? this._year : this.set(_year, 'y');\n  },\n\n  /** Set or retrieve the month for this date.\r\n      @memberof CDate\r\n      @param [month] {number} The month for the date.\r\n      @return {number|CDate} The date's month (if no parameter) or the updated date.\r\n      @throws Error if an invalid date. */\n  month: function month(_month) {\n    return arguments.length === 0 ? this._month : this.set(_month, 'm');\n  },\n\n  /** Set or retrieve the day for this date.\r\n      @memberof CDate\r\n      @param [day] {number} The day for the date.\r\n      @return {number|CData} The date's day (if no parameter) or the updated date.\r\n      @throws Error if an invalid date. */\n  day: function day(_day) {\n    return arguments.length === 0 ? this._day : this.set(_day, 'd');\n  },\n\n  /** Set new values for this date.\r\n      @memberof CDate\r\n      @param year {number} The year for the date.\r\n      @param month {number} The month for the date.\r\n      @param day {number} The day for the date.\r\n      @return {CDate} The updated date.\r\n      @throws Error if an invalid date. */\n  date: function date(year, month, day) {\n    if (!this._calendar.isValid(year, month, day)) {\n      throw (_exports.local.invalidDate || _exports.regionalOptions[''].invalidDate).replace(/\\{0\\}/, this._calendar.local.name);\n    }\n\n    this._year = year;\n    this._month = month;\n    this._day = day;\n    return this;\n  },\n\n  /** Determine whether this date is in a leap year.\r\n      @memberof CDate\r\n      @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not. */\n  leapYear: function leapYear() {\n    return this._calendar.leapYear(this);\n  },\n\n  /** Retrieve the epoch designator for this date, e.g. BCE or CE.\r\n      @memberof CDate\r\n      @return {string} The current epoch. */\n  epoch: function epoch() {\n    return this._calendar.epoch(this);\n  },\n\n  /** Format the year, if not a simple sequential number.\r\n      @memberof CDate\r\n      @return {string} The formatted year. */\n  formatYear: function formatYear() {\n    return this._calendar.formatYear(this);\n  },\n\n  /** Retrieve the month of the year for this date,\r\n      i.e. the month's position within a numbered year.\r\n      @memberof CDate\r\n      @return {number} The month of the year: <code>minMonth</code> to months per year. */\n  monthOfYear: function monthOfYear() {\n    return this._calendar.monthOfYear(this);\n  },\n\n  /** Retrieve the week of the year for this date.\r\n      @memberof CDate\r\n      @return {number} The week of the year: 1 to weeks per year. */\n  weekOfYear: function weekOfYear() {\n    return this._calendar.weekOfYear(this);\n  },\n\n  /** Retrieve the number of days in the year for this date.\r\n      @memberof CDate\r\n      @return {number} The number of days in this year. */\n  daysInYear: function daysInYear() {\n    return this._calendar.daysInYear(this);\n  },\n\n  /** Retrieve the day of the year for this date.\r\n      @memberof CDate\r\n      @return {number} The day of the year: 1 to days per year. */\n  dayOfYear: function dayOfYear() {\n    return this._calendar.dayOfYear(this);\n  },\n\n  /** Retrieve the number of days in the month for this date.\r\n      @memberof CDate\r\n      @return {number} The number of days. */\n  daysInMonth: function daysInMonth() {\n    return this._calendar.daysInMonth(this);\n  },\n\n  /** Retrieve the day of the week for this date.\r\n      @memberof CDate\r\n      @return {number} The day of the week: 0 to number of days - 1. */\n  dayOfWeek: function dayOfWeek() {\n    return this._calendar.dayOfWeek(this);\n  },\n\n  /** Determine whether this date is a week day.\r\n      @memberof CDate\r\n      @return {boolean} <code>true</code> if a week day, <code>false</code> if not. */\n  weekDay: function weekDay() {\n    return this._calendar.weekDay(this);\n  },\n\n  /** Retrieve additional information about this date.\r\n      @memberof CDate\r\n      @return {object} Additional information - contents depends on calendar. */\n  extraInfo: function extraInfo() {\n    return this._calendar.extraInfo(this);\n  },\n\n  /** Add period(s) to a date.\r\n      @memberof CDate\r\n      @param offset {number} The number of periods to adjust by.\r\n      @param period {string} One of 'y' for year, 'm' for month, 'w' for week, 'd' for day.\r\n      @return {CDate} The updated date. */\n  add: function add(offset, period) {\n    return this._calendar.add(this, offset, period);\n  },\n\n  /** Set a portion of the date.\r\n      @memberof CDate\r\n      @param value {number} The new value for the period.\r\n      @param period {string} One of 'y' for year, 'm' for month, 'd' for day.\r\n      @return {CDate} The updated date.\r\n      @throws Error if not a valid date. */\n  set: function set(value, period) {\n    return this._calendar.set(this, value, period);\n  },\n\n  /** Compare this date to another date.\r\n      @memberof CDate\r\n      @param date {CDate} The other date.\r\n      @return {number} -1 if this date is before the other date,\r\n              0 if they are equal, or +1 if this date is after the other date. */\n  compareTo: function compareTo(date) {\n    if (this._calendar.name !== date._calendar.name) {\n      throw (_exports.local.differentCalendars || _exports.regionalOptions[''].differentCalendars).replace(/\\{0\\}/, this._calendar.local.name).replace(/\\{1\\}/, date._calendar.local.name);\n    }\n\n    var c = this._year !== date._year ? this._year - date._year : this._month !== date._month ? this.monthOfYear() - date.monthOfYear() : this._day - date._day;\n    return c === 0 ? 0 : c < 0 ? -1 : +1;\n  },\n\n  /** Retrieve the calendar backing this date.\r\n      @memberof CDate\r\n      @return {BaseCalendar} The calendar implementation. */\n  calendar: function calendar() {\n    return this._calendar;\n  },\n\n  /** Retrieve the Julian date equivalent for this date,\r\n      i.e. days since January 1, 4713 BCE Greenwich noon.\r\n      @memberof CDate\r\n      @return {number} The equivalent Julian date. */\n  toJD: function toJD() {\n    return this._calendar.toJD(this);\n  },\n\n  /** Create a new date from a Julian date.\r\n      @memberof CDate\r\n      @param jd {number} The Julian date to convert.\r\n      @return {CDate} The equivalent date. */\n  fromJD: function fromJD(jd) {\n    return this._calendar.fromJD(jd);\n  },\n\n  /** Convert this date to a standard (Gregorian) JavaScript Date.\r\n      @memberof CDate\r\n      @return {Date} The equivalent JavaScript date. */\n  toJSDate: function toJSDate() {\n    return this._calendar.toJSDate(this);\n  },\n\n  /** Create a new date from a standard (Gregorian) JavaScript Date.\r\n      @memberof CDate\r\n      @param jsd {Date} The JavaScript date to convert.\r\n      @return {CDate} The equivalent date. */\n  fromJSDate: function fromJSDate(jsd) {\n    return this._calendar.fromJSDate(jsd);\n  },\n\n  /** Convert to a string for display.\r\n      @memberof CDate\r\n      @return {string} This date as a string. */\n  toString: function toString() {\n    return (this.year() < 0 ? '-' : '') + pad(Math.abs(this.year()), 4) + '-' + pad(this.month(), 2) + '-' + pad(this.day(), 2);\n  }\n});\n/** Basic functionality for all calendars.\r\n    Other calendars should extend this:\r\n    <pre>OtherCalendar.prototype = new BaseCalendar;</pre>\r\n    @class BaseCalendar */\n\nfunction BaseCalendar() {\n  this.shortYearCutoff = '+10';\n}\n\nassign(BaseCalendar.prototype, {\n  _validateLevel: 0,\n  // \"Stack\" to turn validation on/off\n\n  /** Create a new date within this calendar - today if no parameters given.\r\n      @memberof BaseCalendar\r\n      @param year {CDate|number} The date to duplicate or the year for the date.\r\n      @param [month] {number} The month for the date.\r\n      @param [day] {number} The day for the date.\r\n      @return {CDate} The new date.\r\n      @throws Error if not a valid date or a different calendar used. */\n  newDate: function newDate(year, month, day) {\n    if (year == null) {\n      return this.today();\n    }\n\n    if (year.year) {\n      this._validate(year, month, day, _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n\n      day = year.day();\n      month = year.month();\n      year = year.year();\n    }\n\n    return new CDate(this, year, month, day);\n  },\n\n  /** Create a new date for today.\r\n      @memberof BaseCalendar\r\n      @return {CDate} Today's date. */\n  today: function today() {\n    return this.fromJSDate(new Date());\n  },\n\n  /** Retrieve the epoch designator for this date.\r\n      @memberof BaseCalendar\r\n      @param year {CDate|number} The date to examine or the year to examine.\r\n      @return {string} The current epoch.\r\n      @throws Error if an invalid year or a different calendar used. */\n  epoch: function epoch(year) {\n    var date = this._validate(year, this.minMonth, this.minDay, _exports.local.invalidYear || _exports.regionalOptions[''].invalidYear);\n\n    return date.year() < 0 ? this.local.epochs[0] : this.local.epochs[1];\n  },\n\n  /** Format the year, if not a simple sequential number\r\n      @memberof BaseCalendar\r\n      @param year {CDate|number} The date to format or the year to format.\r\n      @return {string} The formatted year.\r\n      @throws Error if an invalid year or a different calendar used. */\n  formatYear: function formatYear(year) {\n    var date = this._validate(year, this.minMonth, this.minDay, _exports.local.invalidYear || _exports.regionalOptions[''].invalidYear);\n\n    return (date.year() < 0 ? '-' : '') + pad(Math.abs(date.year()), 4);\n  },\n\n  /** Retrieve the number of months in a year.\r\n      @memberof BaseCalendar\r\n      @param year {CDate|number} The date to examine or the year to examine.\r\n      @return {number} The number of months.\r\n      @throws Error if an invalid year or a different calendar used. */\n  monthsInYear: function monthsInYear(year) {\n    this._validate(year, this.minMonth, this.minDay, _exports.local.invalidYear || _exports.regionalOptions[''].invalidYear);\n\n    return 12;\n  },\n\n  /** Calculate the month's ordinal position within the year -\r\n      for those calendars that don't start at month 1!\r\n      @memberof BaseCalendar\r\n      @param year {CDate|number} The date to examine or the year to examine.\r\n      @param month {number} The month to examine.\r\n      @return {number} The ordinal position, starting from <code>minMonth</code>.\r\n      @throws Error if an invalid year/month or a different calendar used. */\n  monthOfYear: function monthOfYear(year, month) {\n    var date = this._validate(year, month, this.minDay, _exports.local.invalidMonth || _exports.regionalOptions[''].invalidMonth);\n\n    return (date.month() + this.monthsInYear(date) - this.firstMonth) % this.monthsInYear(date) + this.minMonth;\n  },\n\n  /** Calculate actual month from ordinal position, starting from minMonth.\r\n      @memberof BaseCalendar\r\n      @param year {number} The year to examine.\r\n      @param ord {number} The month's ordinal position.\r\n      @return {number} The month's number.\r\n      @throws Error if an invalid year/month. */\n  fromMonthOfYear: function fromMonthOfYear(year, ord) {\n    var m = (ord + this.firstMonth - 2 * this.minMonth) % this.monthsInYear(year) + this.minMonth;\n\n    this._validate(year, m, this.minDay, _exports.local.invalidMonth || _exports.regionalOptions[''].invalidMonth);\n\n    return m;\n  },\n\n  /** Retrieve the number of days in a year.\r\n      @memberof BaseCalendar\r\n      @param year {CDate|number} The date to examine or the year to examine.\r\n      @return {number} The number of days.\r\n      @throws Error if an invalid year or a different calendar used. */\n  daysInYear: function daysInYear(year) {\n    var date = this._validate(year, this.minMonth, this.minDay, _exports.local.invalidYear || _exports.regionalOptions[''].invalidYear);\n\n    return this.leapYear(date) ? 366 : 365;\n  },\n\n  /** Retrieve the day of the year for a date.\r\n      @memberof BaseCalendar\r\n      @param year {CDate|number} The date to convert or the year to convert.\r\n      @param [month] {number} The month to convert.\r\n      @param [day] {number} The day to convert.\r\n      @return {number} The day of the year.\r\n      @throws Error if an invalid date or a different calendar used. */\n  dayOfYear: function dayOfYear(year, month, day) {\n    var date = this._validate(year, month, day, _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n\n    return date.toJD() - this.newDate(date.year(), this.fromMonthOfYear(date.year(), this.minMonth), this.minDay).toJD() + 1;\n  },\n\n  /** Retrieve the number of days in a week.\r\n      @memberof BaseCalendar\r\n      @return {number} The number of days. */\n  daysInWeek: function daysInWeek() {\n    return 7;\n  },\n\n  /** Retrieve the day of the week for a date.\r\n      @memberof BaseCalendar\r\n      @param year {CDate|number} The date to examine or the year to examine.\r\n      @param [month] {number} The month to examine.\r\n      @param [day] {number} The day to examine.\r\n      @return {number} The day of the week: 0 to number of days - 1.\r\n      @throws Error if an invalid date or a different calendar used. */\n  dayOfWeek: function dayOfWeek(year, month, day) {\n    var date = this._validate(year, month, day, _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n\n    return (Math.floor(this.toJD(date)) + 2) % this.daysInWeek();\n  },\n\n  /** Retrieve additional information about a date.\r\n      @memberof BaseCalendar\r\n      @param year {CDate|number} The date to examine or the year to examine.\r\n      @param [month] {number} The month to examine.\r\n      @param [day] {number} The day to examine.\r\n      @return {object} Additional information - contents depends on calendar.\r\n      @throws Error if an invalid date or a different calendar used. */\n  extraInfo: function extraInfo(year, month, day) {\n    this._validate(year, month, day, _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n\n    return {};\n  },\n\n  /** Add period(s) to a date.\r\n      Cater for no year zero.\r\n      @memberof BaseCalendar\r\n      @param date {CDate} The starting date.\r\n      @param offset {number} The number of periods to adjust by.\r\n      @param period {string} One of 'y' for year, 'm' for month, 'w' for week, 'd' for day.\r\n      @return {CDate} The updated date.\r\n      @throws Error if a different calendar used. */\n  add: function add(date, offset, period) {\n    this._validate(date, this.minMonth, this.minDay, _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n\n    return this._correctAdd(date, this._add(date, offset, period), offset, period);\n  },\n\n  /** Add period(s) to a date.\r\n      @memberof BaseCalendar\r\n      @private\r\n      @param date {CDate} The starting date.\r\n      @param offset {number} The number of periods to adjust by.\r\n      @param period {string} One of 'y' for year, 'm' for month, 'w' for week, 'd' for day.\r\n      @return {CDate} The updated date. */\n  _add: function _add(date, offset, period) {\n    this._validateLevel++;\n\n    if (period === 'd' || period === 'w') {\n      var jd = date.toJD() + offset * (period === 'w' ? this.daysInWeek() : 1);\n      var d = date.calendar().fromJD(jd);\n      this._validateLevel--;\n      return [d.year(), d.month(), d.day()];\n    }\n\n    try {\n      var y = date.year() + (period === 'y' ? offset : 0);\n      var m = date.monthOfYear() + (period === 'm' ? offset : 0);\n      var d = date.day(); // + (period === 'd' ? offset : 0) +\n      //(period === 'w' ? offset * this.daysInWeek() : 0);\n\n      var resyncYearMonth = function resyncYearMonth(calendar) {\n        while (m < calendar.minMonth) {\n          y--;\n          m += calendar.monthsInYear(y);\n        }\n\n        var yearMonths = calendar.monthsInYear(y);\n\n        while (m > yearMonths - 1 + calendar.minMonth) {\n          y++;\n          m -= yearMonths;\n          yearMonths = calendar.monthsInYear(y);\n        }\n      };\n\n      if (period === 'y') {\n        if (date.month() !== this.fromMonthOfYear(y, m)) {\n          // Hebrew\n          m = this.newDate(y, date.month(), this.minDay).monthOfYear();\n        }\n\n        m = Math.min(m, this.monthsInYear(y));\n        d = Math.min(d, this.daysInMonth(y, this.fromMonthOfYear(y, m)));\n      } else if (period === 'm') {\n        resyncYearMonth(this);\n        d = Math.min(d, this.daysInMonth(y, this.fromMonthOfYear(y, m)));\n      }\n\n      var ymd = [y, this.fromMonthOfYear(y, m), d];\n      this._validateLevel--;\n      return ymd;\n    } catch (e) {\n      this._validateLevel--;\n      throw e;\n    }\n  },\n\n  /** Correct a candidate date after adding period(s) to a date.\r\n      Handle no year zero if necessary.\r\n      @memberof BaseCalendar\r\n      @private\r\n      @param date {CDate} The starting date.\r\n      @param ymd {number[]} The added date.\r\n      @param offset {number} The number of periods to adjust by.\r\n      @param period {string} One of 'y' for year, 'm' for month, 'w' for week, 'd' for day.\r\n      @return {CDate} The updated date. */\n  _correctAdd: function _correctAdd(date, ymd, offset, period) {\n    if (!this.hasYearZero && (period === 'y' || period === 'm')) {\n      if (ymd[0] === 0 || // In year zero\n      date.year() > 0 !== ymd[0] > 0) {\n        // Crossed year zero\n        var adj = {\n          y: [1, 1, 'y'],\n          m: [1, this.monthsInYear(-1), 'm'],\n          w: [this.daysInWeek(), this.daysInYear(-1), 'd'],\n          d: [1, this.daysInYear(-1), 'd']\n        }[period];\n        var dir = offset < 0 ? -1 : +1;\n        ymd = this._add(date, offset * adj[0] + dir * adj[1], adj[2]);\n      }\n    }\n\n    return date.date(ymd[0], ymd[1], ymd[2]);\n  },\n\n  /** Set a portion of the date.\r\n      @memberof BaseCalendar\r\n      @param date {CDate} The starting date.\r\n      @param value {number} The new value for the period.\r\n      @param period {string} One of 'y' for year, 'm' for month, 'd' for day.\r\n      @return {CDate} The updated date.\r\n      @throws Error if an invalid date or a different calendar used. */\n  set: function set(date, value, period) {\n    this._validate(date, this.minMonth, this.minDay, _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n\n    var y = period === 'y' ? value : date.year();\n    var m = period === 'm' ? value : date.month();\n    var d = period === 'd' ? value : date.day();\n\n    if (period === 'y' || period === 'm') {\n      d = Math.min(d, this.daysInMonth(y, m));\n    }\n\n    return date.date(y, m, d);\n  },\n\n  /** Determine whether a date is valid for this calendar.\r\n      @memberof BaseCalendar\r\n      @param year {number} The year to examine.\r\n      @param month {number} The month to examine.\r\n      @param day {number} The day to examine.\r\n      @return {boolean} <code>true</code> if a valid date, <code>false</code> if not. */\n  isValid: function isValid(year, month, day) {\n    this._validateLevel++;\n    var valid = this.hasYearZero || year !== 0;\n\n    if (valid) {\n      var date = this.newDate(year, month, this.minDay);\n      valid = month >= this.minMonth && month - this.minMonth < this.monthsInYear(date) && day >= this.minDay && day - this.minDay < this.daysInMonth(date);\n    }\n\n    this._validateLevel--;\n    return valid;\n  },\n\n  /** Convert the date to a standard (Gregorian) JavaScript Date.\r\n      @memberof BaseCalendar\r\n      @param year {CDate|number} The date to convert or the year to convert.\r\n      @param [month] {number} The month to convert.\r\n      @param [day] {number} The day to convert.\r\n      @return {Date} The equivalent JavaScript date.\r\n      @throws Error if an invalid date or a different calendar used. */\n  toJSDate: function toJSDate(year, month, day) {\n    var date = this._validate(year, month, day, _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n\n    return _exports.instance().fromJD(this.toJD(date)).toJSDate();\n  },\n\n  /** Convert the date from a standard (Gregorian) JavaScript Date.\r\n      @memberof BaseCalendar\r\n      @param jsd {Date} The JavaScript date.\r\n      @return {CDate} The equivalent calendar date. */\n  fromJSDate: function fromJSDate(jsd) {\n    return this.fromJD(_exports.instance().fromJSDate(jsd).toJD());\n  },\n\n  /** Check that a candidate date is from the same calendar and is valid.\r\n      @memberof BaseCalendar\r\n      @private\r\n      @param year {CDate|number} The date to validate or the year to validate.\r\n      @param [month] {number} The month to validate.\r\n      @param [day] {number} The day to validate.\r\n      @param error {string} Rrror message if invalid.\r\n      @throws Error if different calendars used or invalid date. */\n  _validate: function _validate(year, month, day, error) {\n    if (year.year) {\n      if (this._validateLevel === 0 && this.name !== year.calendar().name) {\n        throw (_exports.local.differentCalendars || _exports.regionalOptions[''].differentCalendars).replace(/\\{0\\}/, this.local.name).replace(/\\{1\\}/, year.calendar().local.name);\n      }\n\n      return year;\n    }\n\n    try {\n      this._validateLevel++;\n\n      if (this._validateLevel === 1 && !this.isValid(year, month, day)) {\n        throw error.replace(/\\{0\\}/, this.local.name);\n      }\n\n      var date = this.newDate(year, month, day);\n      this._validateLevel--;\n      return date;\n    } catch (e) {\n      this._validateLevel--;\n      throw e;\n    }\n  }\n});\n/** Implementation of the Proleptic Gregorian Calendar.\r\n    See <a href=\":http://en.wikipedia.org/wiki/Gregorian_calendar\">http://en.wikipedia.org/wiki/Gregorian_calendar</a>\r\n    and <a href=\"http://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar\">http://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar</a>.\r\n    @class GregorianCalendar\r\n    @augments BaseCalendar\r\n    @param [language=''] {string} The language code (default English) for localisation. */\n\nfunction GregorianCalendar(language) {\n  this.local = this.regionalOptions[language] || this.regionalOptions[''];\n}\n\nGregorianCalendar.prototype = new BaseCalendar();\nassign(GregorianCalendar.prototype, {\n  /** The calendar name.\r\n      @memberof GregorianCalendar */\n  name: 'Gregorian',\n\n  /** Julian date of start of Gregorian epoch: 1 January 0001 CE.\r\n     @memberof GregorianCalendar */\n  jdEpoch: 1721425.5,\n\n  /** Days per month in a common year.\r\n     @memberof GregorianCalendar */\n  daysPerMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n\n  /** <code>true</code> if has a year zero, <code>false</code> if not.\r\n     @memberof GregorianCalendar */\n  hasYearZero: false,\n\n  /** The minimum month number.\r\n      @memberof GregorianCalendar */\n  minMonth: 1,\n\n  /** The first month in the year.\r\n      @memberof GregorianCalendar */\n  firstMonth: 1,\n\n  /** The minimum day number.\r\n     @memberof GregorianCalendar */\n  minDay: 1,\n\n  /** Localisations for the plugin.\r\n      Entries are objects indexed by the language code ('' being the default US/English).\r\n      Each object has the following attributes.\r\n      @memberof GregorianCalendar\r\n      @property name {string} The calendar name.\r\n      @property epochs {string[]} The epoch names.\r\n      @property monthNames {string[]} The long names of the months of the year.\r\n      @property monthNamesShort {string[]} The short names of the months of the year.\r\n      @property dayNames {string[]} The long names of the days of the week.\r\n      @property dayNamesShort {string[]} The short names of the days of the week.\r\n      @property dayNamesMin {string[]} The minimal names of the days of the week.\r\n      @property dateFormat {string} The date format for this calendar.\r\n              See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\r\n      @property firstDay {number} The number of the first day of the week, starting at 0.\r\n      @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n  regionalOptions: {\n    // Localisations\n    '': {\n      name: 'Gregorian',\n      epochs: ['BCE', 'CE'],\n      monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n      monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n      dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n      dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n      dayNamesMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n      digits: null,\n      dateFormat: 'mm/dd/yyyy',\n      firstDay: 0,\n      isRTL: false\n    }\n  },\n\n  /** Determine whether this date is in a leap year.\r\n      @memberof GregorianCalendar\r\n      @param year {CDate|number} The date to examine or the year to examine.\r\n      @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\r\n      @throws Error if an invalid year or a different calendar used. */\n  leapYear: function leapYear(year) {\n    var date = this._validate(year, this.minMonth, this.minDay, _exports.local.invalidYear || _exports.regionalOptions[''].invalidYear);\n\n    var year = date.year() + (date.year() < 0 ? 1 : 0); // No year zero\n\n    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n  },\n\n  /** Determine the week of the year for a date - ISO 8601.\r\n      @memberof GregorianCalendar\r\n      @param year {CDate|number} The date to examine or the year to examine.\r\n      @param [month] {number} The month to examine.\r\n      @param [day] {number} The day to examine.\r\n      @return {number} The week of the year, starting from 1.\r\n      @throws Error if an invalid date or a different calendar used. */\n  weekOfYear: function weekOfYear(year, month, day) {\n    // Find Thursday of this week starting on Monday\n    var checkDate = this.newDate(year, month, day);\n    checkDate.add(4 - (checkDate.dayOfWeek() || 7), 'd');\n    return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1;\n  },\n\n  /** Retrieve the number of days in a month.\r\n      @memberof GregorianCalendar\r\n      @param year {CDate|number} The date to examine or the year of the month.\r\n      @param [month] {number} The month.\r\n      @return {number} The number of days in this month.\r\n      @throws Error if an invalid month/year or a different calendar used. */\n  daysInMonth: function daysInMonth(year, month) {\n    var date = this._validate(year, month, this.minDay, _exports.local.invalidMonth || _exports.regionalOptions[''].invalidMonth);\n\n    return this.daysPerMonth[date.month() - 1] + (date.month() === 2 && this.leapYear(date.year()) ? 1 : 0);\n  },\n\n  /** Determine whether this date is a week day.\r\n      @memberof GregorianCalendar\r\n      @param year {CDate|number} The date to examine or the year to examine.\r\n      @param [month] {number} The month to examine.\r\n      @param [day] {number} The day to examine.\r\n      @return {boolean} <code>true</code> if a week day, <code>false</code> if not.\r\n      @throws Error if an invalid date or a different calendar used. */\n  weekDay: function weekDay(year, month, day) {\n    return (this.dayOfWeek(year, month, day) || 7) < 6;\n  },\n\n  /** Retrieve the Julian date equivalent for this date,\r\n      i.e. days since January 1, 4713 BCE Greenwich noon.\r\n      @memberof GregorianCalendar\r\n      @param year {CDate|number} The date to convert or the year to convert.\r\n      @param [month] {number} The month to convert.\r\n      @param [day] {number} The day to convert.\r\n      @return {number} The equivalent Julian date.\r\n      @throws Error if an invalid date or a different calendar used. */\n  toJD: function toJD(year, month, day) {\n    var date = this._validate(year, month, day, _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n\n    year = date.year();\n    month = date.month();\n    day = date.day();\n\n    if (year < 0) {\n      year++;\n    } // No year zero\n    // Jean Meeus algorithm, \"Astronomical Algorithms\", 1991\n\n\n    if (month < 3) {\n      month += 12;\n      year--;\n    }\n\n    var a = Math.floor(year / 100);\n    var b = 2 - a + Math.floor(a / 4);\n    return Math.floor(365.25 * (year + 4716)) + Math.floor(30.6001 * (month + 1)) + day + b - 1524.5;\n  },\n\n  /** Create a new date from a Julian date.\r\n      @memberof GregorianCalendar\r\n      @param jd {number} The Julian date to convert.\r\n      @return {CDate} The equivalent date. */\n  fromJD: function fromJD(jd) {\n    // Jean Meeus algorithm, \"Astronomical Algorithms\", 1991\n    var z = Math.floor(jd + 0.5);\n    var a = Math.floor((z - 1867216.25) / 36524.25);\n    a = z + 1 + a - Math.floor(a / 4);\n    var b = a + 1524;\n    var c = Math.floor((b - 122.1) / 365.25);\n    var d = Math.floor(365.25 * c);\n    var e = Math.floor((b - d) / 30.6001);\n    var day = b - d - Math.floor(e * 30.6001);\n    var month = e - (e > 13.5 ? 13 : 1);\n    var year = c - (month > 2.5 ? 4716 : 4715);\n\n    if (year <= 0) {\n      year--;\n    } // No year zero\n\n\n    return this.newDate(year, month, day);\n  },\n\n  /** Convert this date to a standard (Gregorian) JavaScript Date.\r\n      @memberof GregorianCalendar\r\n      @param year {CDate|number} The date to convert or the year to convert.\r\n      @param [month] {number} The month to convert.\r\n      @param [day] {number} The day to convert.\r\n      @return {Date} The equivalent JavaScript date.\r\n      @throws Error if an invalid date or a different calendar used. */\n  toJSDate: function toJSDate(year, month, day) {\n    var date = this._validate(year, month, day, _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n\n    var jsd = new Date(date.year(), date.month() - 1, date.day());\n    jsd.setHours(0);\n    jsd.setMinutes(0);\n    jsd.setSeconds(0);\n    jsd.setMilliseconds(0); // Hours may be non-zero on daylight saving cut-over:\n    // > 12 when midnight changeover, but then cannot generate\n    // midnight datetime, so jump to 1AM, otherwise reset.\n\n    jsd.setHours(jsd.getHours() > 12 ? jsd.getHours() + 2 : 0);\n    return jsd;\n  },\n\n  /** Create a new date from a standard (Gregorian) JavaScript Date.\r\n      @memberof GregorianCalendar\r\n      @param jsd {Date} The JavaScript date to convert.\r\n      @return {CDate} The equivalent date. */\n  fromJSDate: function fromJSDate(jsd) {\n    return this.newDate(jsd.getFullYear(), jsd.getMonth() + 1, jsd.getDate());\n  }\n}); // Singleton manager\n\nvar _exports = module.exports = new Calendars(); // Date template\n\n\n_exports.cdate = CDate; // Base calendar template\n\n_exports.baseCalendar = BaseCalendar; // Gregorian calendar implementation\n\n_exports.calendars.gregorian = GregorianCalendar;","map":null,"metadata":{},"sourceType":"script"}